// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcIFace

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SenderClient is the client API for Sender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SenderClient interface {
	SendMessage(ctx context.Context, in *SendMsgRequest, opts ...grpc.CallOption) (*SendMsgResponse, error)
}

type senderClient struct {
	cc grpc.ClientConnInterface
}

func NewSenderClient(cc grpc.ClientConnInterface) SenderClient {
	return &senderClient{cc}
}

func (c *senderClient) SendMessage(ctx context.Context, in *SendMsgRequest, opts ...grpc.CallOption) (*SendMsgResponse, error) {
	out := new(SendMsgResponse)
	err := c.cc.Invoke(ctx, "/Sender/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SenderServer is the server API for Sender service.
// All implementations must embed UnimplementedSenderServer
// for forward compatibility
type SenderServer interface {
	SendMessage(context.Context, *SendMsgRequest) (*SendMsgResponse, error)
	mustEmbedUnimplementedSenderServer()
}

// UnimplementedSenderServer must be embedded to have forward compatible implementations.
type UnimplementedSenderServer struct {
}

func (UnimplementedSenderServer) SendMessage(context.Context, *SendMsgRequest) (*SendMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedSenderServer) mustEmbedUnimplementedSenderServer() {}

// UnsafeSenderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SenderServer will
// result in compilation errors.
type UnsafeSenderServer interface {
	mustEmbedUnimplementedSenderServer()
}

func RegisterSenderServer(s grpc.ServiceRegistrar, srv SenderServer) {
	s.RegisterService(&Sender_ServiceDesc, srv)
}

func _Sender_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SenderServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sender/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SenderServer).SendMessage(ctx, req.(*SendMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sender_ServiceDesc is the grpc.ServiceDesc for Sender service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sender_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Sender",
	HandlerType: (*SenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _Sender_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sms.proto",
}

// LogClient is the client API for Log service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogClient interface {
	ListLogsByID(ctx context.Context, in *ListByIDRequest, opts ...grpc.CallOption) (*ListContentsResponse, error)
	ListLogsByTime(ctx context.Context, in *ListByTimeRequest, opts ...grpc.CallOption) (*ListContentsResponse, error)
}

type logClient struct {
	cc grpc.ClientConnInterface
}

func NewLogClient(cc grpc.ClientConnInterface) LogClient {
	return &logClient{cc}
}

func (c *logClient) ListLogsByID(ctx context.Context, in *ListByIDRequest, opts ...grpc.CallOption) (*ListContentsResponse, error) {
	out := new(ListContentsResponse)
	err := c.cc.Invoke(ctx, "/Log/ListLogsByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) ListLogsByTime(ctx context.Context, in *ListByTimeRequest, opts ...grpc.CallOption) (*ListContentsResponse, error) {
	out := new(ListContentsResponse)
	err := c.cc.Invoke(ctx, "/Log/ListLogsByTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServer is the server API for Log service.
// All implementations must embed UnimplementedLogServer
// for forward compatibility
type LogServer interface {
	ListLogsByID(context.Context, *ListByIDRequest) (*ListContentsResponse, error)
	ListLogsByTime(context.Context, *ListByTimeRequest) (*ListContentsResponse, error)
	mustEmbedUnimplementedLogServer()
}

// UnimplementedLogServer must be embedded to have forward compatible implementations.
type UnimplementedLogServer struct {
}

func (UnimplementedLogServer) ListLogsByID(context.Context, *ListByIDRequest) (*ListContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLogsByID not implemented")
}
func (UnimplementedLogServer) ListLogsByTime(context.Context, *ListByTimeRequest) (*ListContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLogsByTime not implemented")
}
func (UnimplementedLogServer) mustEmbedUnimplementedLogServer() {}

// UnsafeLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServer will
// result in compilation errors.
type UnsafeLogServer interface {
	mustEmbedUnimplementedLogServer()
}

func RegisterLogServer(s grpc.ServiceRegistrar, srv LogServer) {
	s.RegisterService(&Log_ServiceDesc, srv)
}

func _Log_ListLogsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).ListLogsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Log/ListLogsByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).ListLogsByID(ctx, req.(*ListByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_ListLogsByTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).ListLogsByTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Log/ListLogsByTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).ListLogsByTime(ctx, req.(*ListByTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Log_ServiceDesc is the grpc.ServiceDesc for Log service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Log_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Log",
	HandlerType: (*LogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLogsByID",
			Handler:    _Log_ListLogsByID_Handler,
		},
		{
			MethodName: "ListLogsByTime",
			Handler:    _Log_ListLogsByTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sms.proto",
}

// StateClient is the client API for State service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateClient interface {
	ListStateByID(ctx context.Context, in *ListByIDRequest, opts ...grpc.CallOption) (*ListStateResponse, error)
	ListStateByTime(ctx context.Context, in *ListByTimeRequest, opts ...grpc.CallOption) (*ListStateResponse, error)
}

type stateClient struct {
	cc grpc.ClientConnInterface
}

func NewStateClient(cc grpc.ClientConnInterface) StateClient {
	return &stateClient{cc}
}

func (c *stateClient) ListStateByID(ctx context.Context, in *ListByIDRequest, opts ...grpc.CallOption) (*ListStateResponse, error) {
	out := new(ListStateResponse)
	err := c.cc.Invoke(ctx, "/State/ListStateByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) ListStateByTime(ctx context.Context, in *ListByTimeRequest, opts ...grpc.CallOption) (*ListStateResponse, error) {
	out := new(ListStateResponse)
	err := c.cc.Invoke(ctx, "/State/ListStateByTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateServer is the server API for State service.
// All implementations must embed UnimplementedStateServer
// for forward compatibility
type StateServer interface {
	ListStateByID(context.Context, *ListByIDRequest) (*ListStateResponse, error)
	ListStateByTime(context.Context, *ListByTimeRequest) (*ListStateResponse, error)
	mustEmbedUnimplementedStateServer()
}

// UnimplementedStateServer must be embedded to have forward compatible implementations.
type UnimplementedStateServer struct {
}

func (UnimplementedStateServer) ListStateByID(context.Context, *ListByIDRequest) (*ListStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStateByID not implemented")
}
func (UnimplementedStateServer) ListStateByTime(context.Context, *ListByTimeRequest) (*ListStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStateByTime not implemented")
}
func (UnimplementedStateServer) mustEmbedUnimplementedStateServer() {}

// UnsafeStateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateServer will
// result in compilation errors.
type UnsafeStateServer interface {
	mustEmbedUnimplementedStateServer()
}

func RegisterStateServer(s grpc.ServiceRegistrar, srv StateServer) {
	s.RegisterService(&State_ServiceDesc, srv)
}

func _State_ListStateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).ListStateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/State/ListStateByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).ListStateByID(ctx, req.(*ListByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_ListStateByTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).ListStateByTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/State/ListStateByTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).ListStateByTime(ctx, req.(*ListByTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// State_ServiceDesc is the grpc.ServiceDesc for State service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var State_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "State",
	HandlerType: (*StateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStateByID",
			Handler:    _State_ListStateByID_Handler,
		},
		{
			MethodName: "ListStateByTime",
			Handler:    _State_ListStateByTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sms.proto",
}

// CallbackClient is the client API for Callback service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallbackClient interface {
	// The greeting service definition.
	RecvCallback(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (*CallbackResponse, error)
}

type callbackClient struct {
	cc grpc.ClientConnInterface
}

func NewCallbackClient(cc grpc.ClientConnInterface) CallbackClient {
	return &callbackClient{cc}
}

func (c *callbackClient) RecvCallback(ctx context.Context, in *CallbackRequest, opts ...grpc.CallOption) (*CallbackResponse, error) {
	out := new(CallbackResponse)
	err := c.cc.Invoke(ctx, "/Callback/RecvCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallbackServer is the server API for Callback service.
// All implementations must embed UnimplementedCallbackServer
// for forward compatibility
type CallbackServer interface {
	// The greeting service definition.
	RecvCallback(context.Context, *CallbackRequest) (*CallbackResponse, error)
	mustEmbedUnimplementedCallbackServer()
}

// UnimplementedCallbackServer must be embedded to have forward compatible implementations.
type UnimplementedCallbackServer struct {
}

func (UnimplementedCallbackServer) RecvCallback(context.Context, *CallbackRequest) (*CallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecvCallback not implemented")
}
func (UnimplementedCallbackServer) mustEmbedUnimplementedCallbackServer() {}

// UnsafeCallbackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallbackServer will
// result in compilation errors.
type UnsafeCallbackServer interface {
	mustEmbedUnimplementedCallbackServer()
}

func RegisterCallbackServer(s grpc.ServiceRegistrar, srv CallbackServer) {
	s.RegisterService(&Callback_ServiceDesc, srv)
}

func _Callback_RecvCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbackServer).RecvCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Callback/RecvCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbackServer).RecvCallback(ctx, req.(*CallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Callback_ServiceDesc is the grpc.ServiceDesc for Callback service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Callback_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Callback",
	HandlerType: (*CallbackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecvCallback",
			Handler:    _Callback_RecvCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sms.proto",
}
